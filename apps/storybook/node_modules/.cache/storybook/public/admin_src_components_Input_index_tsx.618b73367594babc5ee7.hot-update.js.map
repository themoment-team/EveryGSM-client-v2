{"version":3,"file":"admin_src_components_Input_index_tsx.618b73367594babc5ee7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sources":["webpack://storybook/../admin/src/components/Input/index.tsx","webpack://storybook/../admin/src/components/Input/style.ts","webpack://storybook/../admin/src/hooks/useForwardRef.ts"],"sourcesContent":["import type { DetailedHTMLProps, InputHTMLAttributes} from 'react';\nimport { forwardRef } from 'react';\n\nimport { css } from '@emotion/react';\n\nimport { InputValueResetBtnIcon } from 'admin/assets';\nimport { useForwardRef } from 'admin/hooks';\n\nimport * as S from './style';\n\ninterface InputProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {\n  width?: string;\n  height?: string;\n  resetBtn?: boolean;\n}\n\nconst Input = forwardRef<HTMLInputElement, InputProps>(\n  ({ width, height, resetBtn = false, ...attributes }, ref) => {\n    const inputRef = useForwardRef<HTMLInputElement>(ref);\n\n    const resetButtonClick = () => {\n      if (inputRef) {\n        inputRef.current.value = '';\n        inputRef.current.focus();\n      }\n    };\n\n    return (\n      <S.InputWrapper\n        css={css`\n          width: ${width};\n          height: ${height};\n        `}\n      >\n        <S.InputBox {...attributes} ref={inputRef} />\n        {resetBtn && (\n          <S.InputValueResetBtn onClick={() => resetButtonClick()}>\n            <InputValueResetBtnIcon />\n          </S.InputValueResetBtn>\n        )}\n      </S.InputWrapper>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport default Input;\n","import styled from '@emotion/styled';\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n\nexport const InputValueResetBtn = styled.button`\n  height: 1rem;\n  position: absolute;\n  right: 1rem;\n  opacity: 0;\n  transition: ease-in-out 0.3s;\n`;\n\nexport const InputBox = styled.input`\n  width: 100%;\n  height: 100%;\n  border-radius: 1.25rem;\n  border: 0.0625rem solid #dcdcdc;\n  background-color: #fff;\n  padding: 0 1.25rem;\n  font-size: 0.75rem;\n  color: #a4a4a4;\n  transition: ease-in-out 0.3s;\n  outline: none;\n\n  :hover {\n    border: 0.0625rem solid #050505;\n  }\n\n  :focus {\n    color: #505050;\n    border: 0.0625rem solid #050505;\n  }\n\n  &:focus + ${InputValueResetBtn} {\n    opacity: 1;\n    cursor: pointer;\n  }\n\n  ::placeholder {\n    color: #a4a4a4;\n  }\n`;\n","import type { ForwardedRef } from 'react';\nimport { useEffect, useRef } from 'react';\n\nexport const useForwardRef = <T>(\n  ref: ForwardedRef<T>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  initialValue: any = null\n) => {\n  const targetRef = useRef<T>(initialValue);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    if (typeof ref === 'function') {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n\n  return targetRef;\n};\n"],"names":[],"sourceRoot":""}